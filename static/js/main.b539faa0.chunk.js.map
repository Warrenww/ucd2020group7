{"version":3,"sources":["Components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["styles","Menu","width","link","color","textDecoration","DrawerContent","handleDrawerClose","role","onClick","onKeyDown","style","List","to","ListItem","button","ListItemIcon","ListItemText","primary","Avatar","Divider","Sidebar","open","handleDrawerOpen","SwipeableDrawer","onClose","onOpen","anchor","App","backgroundColor","height","display","flexDirection","alignItems","justifyContent","fontSize","overflowY","AppBar","backdropFilter","props","useState","setOpen","_","Milestone","id","useParams","Home","About","useEffect","console","log","process","position","Toolbar","IconButton","edge","aria-label","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b539faa0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nconst styles = {\r\n  Menu: {\r\n    width: 250,\r\n  },\r\n  link: {\r\n    color: \"#000\",\r\n    textDecoration: \"none\",\r\n  },\r\n};\r\n\r\nconst DrawerContent = ({handleDrawerClose}) => (\r\n    <div\r\n      role=\"presentation\"\r\n      onClick={handleDrawerClose}\r\n      onKeyDown={handleDrawerClose}\r\n      style={styles.Menu}\r\n    >\r\n      <List>\r\n        <Link style={styles.link} to=\"/\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <HomeIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Home page\" />\r\n          </ListItem>\r\n        </Link>\r\n        <Link style={styles.link} to=\"/milestone/1\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <Avatar>M1</Avatar>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Milestone 1\" />\r\n          </ListItem>\r\n        </Link>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        <Link style={styles.link} to=\"/about\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <InfoIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"About\" />\r\n          </ListItem>\r\n        </Link>\r\n      </List>\r\n    </div>\r\n);\r\n\r\nconst Sidebar = ({\r\n  open,\r\n  handleDrawerClose,\r\n  handleDrawerOpen,\r\n}) => {\r\n  return (\r\n    <SwipeableDrawer\r\n      open={open}\r\n      onClose={handleDrawerClose}\r\n      onOpen={handleDrawerOpen}\r\n      anchor='left'\r\n    >\r\n      <DrawerContent handleDrawerClose={handleDrawerClose} />\r\n    </SwipeableDrawer>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Sidebar from './Components/Sidebar.js';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst styles = {\r\n  App: {\r\n    backgroundColor: \"#ccc\",\r\n    height: \"100vh\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    fontSize: \"1em\",\r\n    color: \"white\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  AppBar: {\r\n    backgroundColor: \"#33333333\",\r\n    backdropFilter: \"blur(5px)\",\r\n  },\r\n};\r\n\r\nfunction App(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const handleDrawerOpen = _ => setOpen(true);\r\n  const handleDrawerClose = _ => setOpen(false);\r\n\r\n  const Milestone = props => {\r\n    const {id} = useParams();\r\n    return <h1>Milestone {id}</h1>;\r\n  }\r\n  const Home = props => (<h1>Home</h1>);\r\n  const About = props => (<h1>About</h1>);\r\n  useEffect(()=>{\r\n    console.log(process.env.PUBLIC_URL);\r\n  });\r\n\r\n\r\n  return (\r\n    <div style={styles.App}>\r\n      <AppBar position=\"fixed\" style={styles.AppBar}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={handleDrawerOpen}>\r\n            <MenuIcon/>\r\n          </IconButton>\r\n          <div>\r\n            UCD 2020 Group 7\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n          <Sidebar\r\n            open={open}\r\n            handleDrawerOpen={handleDrawerOpen}\r\n            handleDrawerClose={handleDrawerClose}\r\n          />\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/about\">\r\n              <About />\r\n            </Route>\r\n            <Route path=\"/milestone/:id\">\r\n              <Milestone />\r\n            </Route>\r\n          </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}